'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// BANKIST APP

// Data
const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'AndrÃ© Luis Barbosa',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Sarah Smith',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1,
  pin: 4444,
};

const accounts = [account1, account2, account3, account4];

// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES

// const currencies = new Map([
//   ['USD', 'United States dollar'],
//   ['EUR', 'Euro'],
//   ['GBP', 'Pound sterling'],
// ]);

// const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

/////////////////////////////////////////////////

/* MÃ‰TODOS SIMPLES DE ARRAY 

let arr = ['a', 'b', 'c', 'd', 'e'];

// SLICE
console.log(arr.slice(2));
console.log(arr.slice(2, 4));
console.log(arr.slice(-2));
console.log(arr.slice(-1));
console.log(arr.slice(1, -2));
// CÃ³pia com Slice
console.log(arr.slice());
// CÃ³pia com Spread
console.log([...arr]);

// SPLICE
// console.log(arr.splice(2));
arr.splice(-1);
console.log(arr);
arr.splice(1, 2); // Aqui comeÃ§a na posiÃ§Ã£o 1 e deleta dois elementos na frente.

// REVERSE
arr = ['a', 'b', 'c', 'd', 'e'];
const arr2 = ['j', 'i', 'h', 'g', 'f'];
console.log(arr2.reverse());

// CONCAT
const letters = arr.concat(arr2);
console.log(letters);
// concatenando com Spread
console.log([...arr, ...arr2]);

// JOIN
console.log(letters.join(' - '));

// slice - retorna uma nova array fatiada, por isso o nome slice(fatia). O primeiro argumento passado Ã© o Ã­ndice que indica a partir de onde ele vai fatiar, o segundo Ã© onde ele vai parar. Quando o parÃ¢metro Ã© negativo, ele comeÃ§arÃ¡ a fatiar do final, isso Ã© Ãºtil pois com -1 pegamos o ultimo elemento de cada array. Se chamarmos o slice sem nenhum argumento, ele praticamente cria uma cÃ³pia superficial de qualquer array.

// splice - a diferenÃ§a entre ele e o slice Ã© que o slice nÃ£o altera a array principal, o splice altera. Quando se usa o splice para remover elementos, array principal ficarÃ¡ apenas com os elementos que nÃ£o foram removidos, com a sobra. NÃ¡ prÃ¡tica ele Ã© usado para excluir elementos de um array, nÃ£o Ã© visado o valor final dele.

// reverse - literalmente inverte uma array. Ã‰ importante notar que este mÃ©todo altera a array original, ou seja, a original ficarÃ¡ revertida permanentemente atÃ© que a reversÃ£o seja desfeita.

// concat - serve para concatenar duas arrays. Primeiro Ã© preciso chamar a array que vai receber o mÃ©todo e em seguida, nos argumentos, especificar qual serÃ¡ a outra array que serÃ¡ juntada. O concat nÃ£o altera a matriz original.

// join - ele cria uma string com os elementos da array. Os argumentos que sÃ£o passados para ele Ã© o que vai ter entre os elementos da array quando forem transformados em string. Se nÃ£o for colocado nada, ele retornarÃ¡ uma string Ãºnica com todos os elementos juntos. Geralmente Ã© passado como argumento um espaÃ§o vazio " " ou um hÃ­fen " - ", mas pode ser colcado qualquer coisa, exemplo: '*---*'.
*/

/* NOVO MÃ‰TODO AT

const arr = [23, 11, 64];
console.log(arr[0]);
console.log(arr.at(0));

// formas de capturar o Ãºltimo elemento da array
console.log(arr[arr.length - 1]);
console.log(arr.slice(-1)[0]);
console.log(arr.at(-1));
console.log('Jonas'.at(0));

// at - com esse mÃ©todo, podemos substituir os tradicionais colchetes para uma sintaxe mais moderna, com os Ãºltimos recursos da linguagem. Os argumentos dele funcionam da mesma forma que o SLICE, porem ele nÃ£o cria uma nova array, apenas retorna o valor. Ele funciona tambÃ©m com strings

*/

/* FOR EACH

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

// for (const movement of movements) {
//   if (movement > 0) {
//     console.log(`Nova entrada de ${movement} ğŸ’µ`);
//   } else if (movement < 0) {
//     console.log(`Nova saÃ­da de ${movement} â­•`);
//   }
// }

movements.forEach(function (mov, index) {
  if (mov > 0) {
    console.log(`MovimentaÃ§Ã£o ${index + 1}: Nova entrada de ${mov} ğŸ’µ`);
  } else if (mov < 0) {
    console.log(`MovimentaÃ§Ã£o ${index + 1}: Nova saÃ­da de ${mov} â­•`);
  }
});
// 0: function(200)
// 1: function(450)
// 2: function(-400)
// ...

// forEach - Por mais que o forEach seja mais fÃ¡cil de entender, nÃ£o tem como parar ele, ou seja, as intruÃ§Ãµes break and continue nÃ£o funcionam.

*/

/* forEach with maps and sets

// Map
const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

currencies.forEach(function (value, key, map) {
  console.log(`${key}: ${value}`);
});

// Set
const currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);
console.log(currenciesUnique);

currenciesUnique.forEach(function (key, value, map) {
  console.log(`${key}: ${value}`);
});

*/
